services:
  web:
    # Build the image from the Dockerfile in the current directory
    build: .

    # Host the FastAPI application on port 8000
    ports:
      - "8000:8000"

    depends_on:
      postgres:
        condition: service_healthy

    environment:
      DATABASE_URL: postgresql://tw:tw@postgres:5432/tw
      FASTAPI_ENV: production
      REDIS_HOST: redis
      REDIS_PORT: "6379"
      CELERY_BROKER_URL: redis://redis:6379/0
      CELERY_RESULT_BACKEND: redis://redis:6379/1
    command: ["fastapi", "run", "--host", "0.0.0.0", "src/tw/main.py"]

  worker:
    build: .
    depends_on:
      - web
      - redis
    environment:
      DATABASE_URL: postgresql://tw:tw@postgres:5432/tw
      REDIS_HOST: redis
      REDIS_PORT: "6379"
      CELERY_BROKER_URL: redis://redis:6379/0
      CELERY_RESULT_BACKEND: redis://redis:6379/1
    command: ["celery", "-A", "tw.celery_app", "worker", "--loglevel=info"]

  frontend:
    build:
      context: ./frontend
    ports:
      - "3000:3000"
    environment:
      PORT: 3000
      NODE_ENV: production
      INTERNAL_API_URL: http://web:8000

  postgres:
    image: postgres:16-alpine
    restart: unless-stopped
    environment:
      POSTGRES_USER: tw
      POSTGRES_PASSWORD: tw
      POSTGRES_DB: tw
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U tw -d tw"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: ["redis-server", "--save", "", "--appendonly", "no"]

volumes:
  pgdata:
